# -*- coding: utf-8 -*-
"""mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nnAj6WfZn38_1q6opF_ohGBGgk_XqmC1
"""

import tensorflow as tf
import tensorflow.keras
import numpy as np
import matplotlib.pyplot as plt
print(tensorflow.__version__)

(x_train,y_train),(x_test,y_test)=tf.keras.datasets.mnist.load_data(
    path='mnist.npz'
)
x_train=x_train/255.
x_test=x_test/255.

y_train=tf.keras.utils.to_categorical(y_train, num_classes=10, dtype='float32')
y_test=tf.keras.utils.to_categorical(y_test, num_classes=10, dtype='float32')

print("training data shape:",x_train.shape)
print("testing data shape:",x_test.shape)

first_train_img = np.reshape(x_train[1, :], (28, 28))
plt.matshow(first_train_img, cmap = plt.get_cmap('gray'))
plt.show()

model=tf.keras.Sequential()
model.add(tf.keras.layers.InputLayer(input_shape=(28, 28, 1)))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(784,activation='ReLU'))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(256,activation='ReLU'))
model.add(tf.keras.layers.Dense(128,activation='ReLU'))
model.add(tf.keras.layers.Dense(10,activation='softmax'))

model.summary() #確認每一層內容 繼承的方法不能用.summary

loss=tf.keras.losses.categorical_crossentropy
batch_size=64
epochs=20
lr=1e-4
optimizer=tf.keras.optimizers.Adam(learning_rate=lr)

model.compile(loss=loss, optimizer=optimizer, metrics='accuracy')

history=model.fit(x_train,y_train,batch_size=batch_size,epochs=epochs,shuffle='true')

history.history
#history.history[loss]

his=model.evaluate(x_test,y_test)
loss=his[0]
accuracy=his[1]
print("acc:",accuracy)

import matplotlib.pyplot as plt


plt.figure()
plt.plot(history.history['accuracy'])
#plt.plot(history.history['loss'])
plt.title('model accuracy')
#plt.ylim([0, 1])  # Set the limits of the y-axis between 0 and 1
plt.ylabel('accuracy')
plt.xlabel('epoch')

plt.figure()
#plt.plot(history.history['accuracy'])
plt.plot(history.history['loss'])
plt.title('Model loss')
#plt.ylim([0, 1])  # Set the limits of the y-axis between 0 and 1
plt.ylabel('accuracy')
plt.xlabel('epoch')

import sklearn
from sklearn.model_selection import cross_val_score
from sklearn.metrics import confusion_matrix
import seaborn as sns

y_predict = model.predict(x_test)
y_predict = np.argmax(y_predict, 1)

rounded_ytest=np.argmax(y_test, axis=1)       #轉回整數矩陣 原本one hot無法用在confusion matrix
mat = confusion_matrix(rounded_ytest, y_predict)

plt.figure(figsize=(8,8))
sns.heatmap(mat, square= True, annot=True, cbar= True, fmt='.20g', cmap='Blues')

plt.title('confusion matrix')
plt.xlabel("predicted value")
plt.ylabel("true value")
plt.show()